package dpfm_api_input_reader

import (
	"convert-to-dpfm-invoice-document-from-sap-billing-document/DPFM_API_Caller/requests"
)

func (sdc *SDC) ConvertToHeader() *requests.Header {
	data := sdc.Header
	return &requests.Header{
		BillingDocument:            data.BillingDocument,
		BillingDocumentType:        data.BillingDocumentType,
		SDDocumentCategory:         data.SDDocumentCategory,
		BillingDocumentCategory:    data.BillingDocumentCategory,
		CreationDate:               data.CreationDate,
		LastChangeDate:             data.LastChangeDate,
		SalesOrganization:          data.SalesOrganization,
		DistributionChannel:        data.DistributionChannel,
		Division:                   data.Division,
		BillingDocumentDate:        data.BillingDocumentDate,
		BillingDocumentIsCancelled: data.BillingDocumentIsCancelled,
		CancelledBillingDocument:   data.CancelledBillingDocument,
		IsExportDelivery:           data.IsExportDelivery,
		TotalNetAmount:             data.TotalNetAmount,
		TransactionCurrency:        data.TransactionCurrency,
		TaxAmount:                  data.TaxAmount,
		TotalGrossAmount:           data.TotalGrossAmount,
		CustomerPriceGroup:         data.CustomerPriceGroup,
		IncotermsClassification:    data.IncotermsClassification,
		CustomerPaymentTerms:       data.CustomerPaymentTerms,
		PaymentMethod:              data.PaymentMethod,
		CompanyCode:                data.CompanyCode,
		AccountingDocument:         data.AccountingDocument,
		ExchangeRateDate:           data.ExchangeRateDate,
		ExchangeRateType:           data.ExchangeRateType,
		DocumentReferenceID:        data.DocumentReferenceID,
		SoldToParty:                data.SoldToParty,
		PartnerCompany:             data.PartnerCompany,
		PurchaseOrderByCustomer:    data.PurchaseOrderByCustomer,
		CustomerGroup:              data.CustomerGroup,
		Country:                    data.Country,
		CityCode:                   data.CityCode,
		Region:                     data.Region,
		CreditControlArea:          data.CreditControlArea,
		OverallBillingStatus:       data.OverallBillingStatus,
		AccountingPostingStatus:    data.AccountingPostingStatus,
		AccountingTransferStatus:   data.AccountingTransferStatus,
		InvoiceListStatus:          data.InvoiceListStatus,
		BillingDocumentListType:    data.BillingDocumentListType,
		BillingDocumentListDate:    data.BillingDocumentListDate,
	}
}

func (sdc *SDC) ConvertToHeaderPartner(num int) *requests.HeaderPartner {
	dataHeader := sdc.Header
	data := sdc.Header.HeaderPartner[num]
	return &requests.HeaderPartner{
		BillingDocument: dataHeader.BillingDocument,
		PartnerFunction: data.PartnerFunction,
		Customer:        data.Customer,
		Supplier:        data.Supplier,
	}
}

func (sdc *SDC) ConvertToItem(num int) *requests.Item {
	dataHeader := sdc.Header
	data := sdc.Header.Item[num]

	return &requests.Item{
		BillingDocument:                dataHeader.BillingDocument,
		BillingDocumentItem:            data.BillingDocumentItem,
		SalesDocumentItemCategory:      data.SalesDocumentItemCategory,
		SalesDocumentItemType:          data.SalesDocumentItemType,
		ReturnItemProcessingType:       data.ReturnItemProcessingType,
		CreatedByUser:                  data.CreatedByUser,
		CreationDate:                   data.CreationDate,
		CreationTime:                   data.CreationTime,
		ReferenceLogicalSystem:         data.ReferenceLogicalSystem,
		OrganizationDivision:           data.OrganizationDivision,
		Division:                       data.Division,
		SalesOffice:                    data.SalesOffice,
		Material:                       data.Material,
		OriginallyRequestedMaterial:    data.OriginallyRequestedMaterial,
		InternationalArticleNumber:     data.InternationalArticleNumber,
		PricingReferenceMaterial:       data.PricingReferenceMaterial,
		Batch:                          data.Batch,
		ProductHierarchyNode:           data.ProductHierarchyNode,
		MaterialGroup:                  data.MaterialGroup,
		AdditionalMaterialGroup1:       data.AdditionalMaterialGroup1,
		AdditionalMaterialGroup2:       data.AdditionalMaterialGroup2,
		AdditionalMaterialGroup3:       data.AdditionalMaterialGroup3,
		AdditionalMaterialGroup4:       data.AdditionalMaterialGroup4,
		AdditionalMaterialGroup5:       data.AdditionalMaterialGroup5,
		MaterialCommissionGroup:        data.MaterialCommissionGroup,
		Plant:                          data.Plant,
		StorageLocation:                data.StorageLocation,
		ReplacementPartType:            data.ReplacementPartType,
		MaterialGroupHierarchy1:        data.MaterialGroupHierarchy1,
		MaterialGroupHierarchy2:        data.MaterialGroupHierarchy2,
		PlantRegion:                    data.PlantRegion,
		PlantCounty:                    data.PlantCounty,
		PlantCity:                      data.PlantCity,
		BOMExplosion:                   data.BOMExplosion,
		MaterialDeterminationType:      data.MaterialDeterminationType,
		BillingDocumentItemText:        data.BillingDocumentItemText,
		ServicesRenderedDate:           data.ServicesRenderedDate,
		BillingQuantity:                data.BillingQuantity,
		BillingQuantityUnit:            data.BillingQuantityUnit,
		BillingQuantityInBaseUnit:      data.BillingQuantityInBaseUnit,
		BaseUnit:                       data.BaseUnit,
		MRPRequiredQuantityInBaseUnit:  data.MRPRequiredQuantityInBaseUnit,
		BillingToBaseQuantityDnmntr:    data.BillingToBaseQuantityDnmntr,
		BillingToBaseQuantityNmrtr:     data.BillingToBaseQuantityNmrtr,
		ItemGrossWeight:                data.ItemGrossWeight,
		ItemNetWeight:                  data.ItemNetWeight,
		ItemWeightUnit:                 data.ItemWeightUnit,
		ItemVolume:                     data.ItemVolume,
		ItemVolumeUnit:                 data.ItemVolumeUnit,
		BillToPartyCountry:             data.BillToPartyCountry,
		BillToPartyRegion:              data.BillToPartyRegion,
		BillingPlanRule:                data.BillingPlanRule,
		BillingPlan:                    data.BillingPlan,
		BillingPlanItem:                data.BillingPlanItem,
		NetAmount:                      data.NetAmount,
		TransactionCurrency:            data.TransactionCurrency,
		GrossAmount:                    data.GrossAmount,
		PricingDate:                    data.PricingDate,
		AbsltPriceDetnExchangeRate:     data.AbsltPriceDetnExchangeRate,
		PriceDetnExchRateIsIndrctQtan:  data.PriceDetnExchRateIsIndrctQtan,
		PriceDetnExchangeRateDate:      data.PriceDetnExchangeRateDate,
		PricingScaleQuantityInBaseUnit: data.PricingScaleQuantityInBaseUnit,
		TaxAmount:                      data.TaxAmount,
		CostAmount:                     data.CostAmount,
		Subtotal1Amount:                data.Subtotal1Amount,
		Subtotal2Amount:                data.Subtotal2Amount,
		Subtotal3Amount:                data.Subtotal3Amount,
		Subtotal4Amount:                data.Subtotal4Amount,
		Subtotal5Amount:                data.Subtotal5Amount,
		Subtotal6Amount:                data.Subtotal6Amount,
		StatisticalValueControl:        data.StatisticalValueControl,
		CashDiscountIsDeductible:       data.CashDiscountIsDeductible,
		CustomerConditionGroup1:        data.CustomerConditionGroup1,
		CustomerConditionGroup2:        data.CustomerConditionGroup2,
		CustomerConditionGroup3:        data.CustomerConditionGroup3,
		CustomerConditionGroup4:        data.CustomerConditionGroup4,
		CustomerConditionGroup5:        data.CustomerConditionGroup5,
		ManualPriceChangeType:          data.ManualPriceChangeType,
		MaterialPricingGroup:           data.MaterialPricingGroup,
		AbsltStatisticsExchangeRate:    data.AbsltStatisticsExchangeRate,
		StatisticsExchRateIsIndrctQtan: data.StatisticsExchRateIsIndrctQtan,
		MainItemPricingRefMaterial:     data.MainItemPricingRefMaterial,
		MainItemMaterialPricingGroup:   data.MainItemMaterialPricingGroup,
		DepartureCountry:               data.DepartureCountry,
		TaxJurisdiction:                data.TaxJurisdiction,
		ProductTaxClassification1:      data.ProductTaxClassification1,
		ProductTaxClassification2:      data.ProductTaxClassification2,
		ProductTaxClassification3:      data.ProductTaxClassification3,
		ProductTaxClassification4:      data.ProductTaxClassification4,
		ProductTaxClassification5:      data.ProductTaxClassification5,
		ProductTaxClassification6:      data.ProductTaxClassification6,
		ProductTaxClassification7:      data.ProductTaxClassification7,
		ProductTaxClassification8:      data.ProductTaxClassification8,
		ProductTaxClassification9:      data.ProductTaxClassification9,
		ZeroVATRsn:                     data.ZeroVATRsn,
		EligibleAmountForCashDiscount:  data.EligibleAmountForCashDiscount,
		BusinessArea:                   data.BusinessArea,
		ProfitCenter:                   data.ProfitCenter,
		WBSElement:                     data.WBSElement,
		ControllingArea:                data.ControllingArea,
		ProfitabilitySegment:           data.ProfitabilitySegment,
		OrderID:                        data.OrderID,
		CostCenter:                     data.CostCenter,
		OriginSDDocument:               data.OriginSDDocument,
		OriginSDDocumentItem:           data.OriginSDDocumentItem,
		MatlAccountAssignmentGroup:     data.MatlAccountAssignmentGroup,
		ReferenceSDDocument:            data.ReferenceSDDocument,
		ReferenceSDDocumentItem:        data.ReferenceSDDocumentItem,
		ReferenceSDDocumentCategory:    data.ReferenceSDDocumentCategory,
		SalesDocument:                  data.SalesDocument,
		SalesDocumentItem:              data.SalesDocumentItem,
		SalesSDDocumentCategory:        data.SalesSDDocumentCategory,
		HigherLevelItem:                data.HigherLevelItem,
		BillingDocumentItemInPartSgmt:  data.BillingDocumentItemInPartSgmt,
		ExternalReferenceDocument:      data.ExternalReferenceDocument,
		ExternalReferenceDocumentItem:  data.ExternalReferenceDocumentItem,
		SalesGroup:                     data.SalesGroup,
		AdditionalCustomerGroup1:       data.AdditionalCustomerGroup1,
		AdditionalCustomerGroup2:       data.AdditionalCustomerGroup2,
		AdditionalCustomerGroup3:       data.AdditionalCustomerGroup3,
		AdditionalCustomerGroup4:       data.AdditionalCustomerGroup4,
		AdditionalCustomerGroup5:       data.AdditionalCustomerGroup5,
		SDDocumentReason:               data.SDDocumentReason,
		RetailPromotion:                data.RetailPromotion,
		RebateBasisAmount:              data.RebateBasisAmount,
		VolumeRebateGroup:              data.VolumeRebateGroup,
		ItemIsRelevantForCredit:        data.ItemIsRelevantForCredit,
		CreditRelatedPrice:             data.CreditRelatedPrice,
		SalesDeal:                      data.SalesDeal,
		SalesPromotion:                 data.SalesPromotion,
		SalesOrderSalesDistrict:        data.SalesOrderSalesDistrict,
		SalesOrderCustomerGroup:        data.SalesOrderCustomerGroup,
		SalesOrderCustomerPriceGroup:   data.SalesOrderCustomerPriceGroup,
		SalesOrderPriceListType:        data.SalesOrderPriceListType,
		SalesOrderSalesOrganization:    data.SalesOrderSalesOrganization,
		SalesOrderDistributionChannel:  data.SalesOrderDistributionChannel,
		SalesDocIsCreatedFromReference: data.SalesDocIsCreatedFromReference,
		ShippingPoint:                  data.ShippingPoint,
		HigherLevelItemUsage:           data.HigherLevelItemUsage,
	}
}

func (sdc *SDC) ConvertToItemPricingElement(num int) *requests.ItemPricingElement {
	dataHeader := sdc.Header
	dataItem := dataHeader.Item[num]
	data := dataItem.ItemPricingElement[num]
	return &requests.ItemPricingElement{
		BillingDocument:             dataHeader.BillingDocument,
		BillingDocumentItem:         dataItem.BillingDocumentItem,
		PricingProcedureStep:        data.PricingProcedureStep,
		PricingProcedureCounter:     data.PricingProcedureCounter,
		ConditionType:               data.ConditionType,
		PricingDateTime:             data.PricingDateTime,
		ConditionCalculationType:    data.ConditionCalculationType,
		ConditionBaseValue:          data.ConditionBaseValue,
		ConditionRateValue:          data.ConditionRateValue,
		ConditionCurrency:           data.ConditionCurrency,
		ConditionQuantity:           data.ConditionQuantity,
		ConditionQuantityUnit:       data.ConditionQuantityUnit,
		ConditionCategory:           data.ConditionCategory,
		PricingScaleType:            data.PricingScaleType,
		ConditionRecord:             data.ConditionRecord,
		ConditionSequentialNumber:   data.ConditionSequentialNumber,
		TaxCode:                     data.TaxCode,
		ConditionAmount:             data.ConditionAmount,
		TransactionCurrency:         data.TransactionCurrency,
		PricingScaleBasis:           data.PricingScaleBasis,
		ConditionScaleBasisValue:    data.ConditionScaleBasisValue,
		ConditionScaleBasisUnit:     data.ConditionScaleBasisUnit,
		ConditionScaleBasisCurrency: data.ConditionScaleBasisCurrency,
		ConditionIsManuallyChanged:  data.ConditionIsManuallyChanged,
	}
}
